.global expsp

.expsp:

.input        len, input_x1:input_x0, output_y1:output_y0
.gen_var      tmp0:tmp1, tmp2, x2, x1:x0, y2, y1:y0, a0, a1, a2, x3, x4, x5, cond0, cond1, cond2, z0, z1, z2, z3, z4, z5, a3, a4, a5, x6, x7, x8, z6, z7, z8, a6, a7, z9, z10, z11, a8
.add_var      x, y, offset

              SMVAGA36    input_x1:input_x0,     x
			  SMVAGA36    output_y1:output_y0,   y
			
			  SMOVIL      	16,     tmp1
			  SMOVIH		0,		tmp1
			  SMOVIL		0,		tmp0
			  SMVAGA36    	tmp0:tmp1,   offset 
			  SMOVIL      	3,      tmp2
			  SMVCGC      	tmp2,   SCR
			  
.expsp_loop:  .loop

              VLDDW       *x++[offset],        x1:x0
			  VLDW        *x++[offset],        x2  

              VMOVIL	  0xAA3B,              a0							
		      VMOVIH	  0x3FB80000,          a0	        ;a0=12e

              VMOVIL	  0,                   a1						
		      VMOVIH	  0x3f800000,          a1           ;a1=1
			  
			  VFMULS32    x0, a0,              x0
			  VFMULS32    x1, a0,              x1
			  VFMULS32    x2, a0,              x2           ;x=x*12e
			  
			  VMOVIL	  0x0000,              a2
		      VMOVIH 	  0x00000000,          a2           ;a2=0
			  
			  VMOV        x0,                  x3
			  VMOV        x1,                  x4
			  VMOV        x2,                  x5           ;x'=x
			  
			  VFCMPLS32   x3, a2,              cond0
			  VFCMPLS32   x4, a2,              cond1
			  VFCMPLS32   x5, a2,              cond2        ;x'<0
			  
[cond0]       VFSUBS32    a1, x3,              x3
[cond1]       VFSUBS32    a1, x4,              x4
[cond2]       VFSUBS32    a1, x5,              x5           ;if(x'<0) then x'=x'-1

			  VFSTRU32    x3,                  x3
			  VFSTRU32    x4,                  x4
			  VFSTRU32    x5,                  x5           
			  
			  VFINTS32    x3,                  x3
			  VFINTS32    x4,                  x4
			  VFINTS32    x5,                  x5           ;x'=int(x')
			  
			  VFSUBS32    x3, x0,              z0
			  VFSUBS32    x4, x1,              z1
			  VFSUBS32    x5, x2,              z2           ;z=x-x'
			  
			  VMOVIL	  0x82E9,              a3
		      VMOVIH	  0x3E770000,          a3		    ;a3 = 0.241710325242730
		      VMOVIL	  0x381D,              a4
		      VMOVIH	  0xBE9D0000,          a4		    ;a4 = -0.307068740644571
		      VMOVIL	  0x0001,              a5
		      VMOVIH	  0x42FE0000,          a5		    ;a5 = 127.000007286727458
			  
			  VMOV        x0,                  x6           
			  VMOV        x1,                  x7
			  VMOV        x2,                  x8           ;x"=x
			  
			  VFMULAS32   z0, a4, x6,          x6
			  VFMULAS32   z1, a4, x7,          x7
			  VFMULAS32   z2, a4, x8,          x8           ;x"=z*a4+x"
			  
			  VFMULS32    z0, z0,              z3
			  VFMULS32    z1, z1,              z4
			  VFMULS32    z2, z2,              z5           ;z^2
			  
			  VFMULAS32   z3, a3, x6,          x6
			  VFMULAS32   z4, a3, x7,          x7
			  VFMULAS32   z5, a3, x8,          x8           ;x"=z^2*a3+x"
			  
			  VFMULS32    z3, z0,              z6
			  VFMULS32    z4, z1,              z7
			  VFMULS32    z5, z2,              z8           ;z^3
			  
			  VMOVIL	  0x137A,              a6			
		      VMOVIH	  0x3C600000,          a6			;a6 = 0.013676518889531
		      VMOVIL	  0xA09E,              a7			
		      VMOVIH	  0x3D530000,          a7			;a7 = 0.051666849136575
			  
			  VFMULAS32   z6, a7, x6,          x6
			  VFMULAS32   z7, a7, x7,          x7
			  VFMULAS32   z8, a7, x8,          x8           ;x"=z^3*a7+x"
			  
			  VFMULS32    z0, z6,              z9
			  VFMULS32    z1, z7,              z10
			  VFMULS32    z2, z8,              z11          ;z^4
			  
			  VFMULAS32   z9,  a6, x6,         x6
			  VFMULAS32   z10, a6, x7,         x7
			  VFMULAS32   z11, a6, x8,         x8           ;x"=z^4*a6+x"
			  
			  VMOVIL	  0,                   a8
		      VMOVIH	  0x4B000000,          a8
			  
			  VFADDS32    x6, a5,              x6
			  VFADDS32    x7, a5,              x7
			  VFADDS32    x8, a5,              x8          ;x"=x"+a8
			  
			  VFMULS32    x6, a8,              x6
			  VFMULS32    x7, a8,              x7
			  VFMULS32    x8, a8,              x8          ;x"=x"*a8
			  
			  VFSTRU32    x6,                  y0
			  VFSTRU32    x7,				   y1
			  VFSTRU32    x8,                  y2          ;y
			  
			  VSTDW       y1:y0, *y++[offset]
			  VSTW        y2,    *y++[offset]
			  SSUBU       48, len, len 
[len]         SBR         .expsp_loop

.endloop

.size expsp, -.expsp			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
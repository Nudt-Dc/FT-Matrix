.global atan2dp

.atan2dp:

.input        len, input_x1:input_x0, input_y1:input_y0, output_z1:output_z0
.gen_var      tmp0:tmp1, tmp2, x1:x0, x3:x2, x5:x4, y1:y0, y3:y2, y5:y4, z1:z0, z3:z2, z5:z4, a0H:a0L, a1H:a1L, a2H:a2L, g1:g0, g3:g2, g5:g4, num0H:num0L, num1H:num1L, num2H:num2L, flag0H:flag0L, flag1H:flag1L, flag2H:flag2L, xsign0H:xsign0L, xsign1H:xsign1L, xsign2H:xsign2L, ysign0H:ysign0L, ysign1H:ysign1L, ysign2H:ysign2L, cond0, cond1, cond2,  fabsx0H:fabsx0L,  fabsx1H:fabsx1L, fabsx2H:fabsx2L, fabsy0H:fabsy0L, fabsy1H:fabsy1L, fabsy2H:fabsy2L, g7:g6, g9:g8, g11:g10, g13:g12, g15:g14, g17:g16, g19:g18, g21:g20, g23:g22, g25:g24, g27:g26, g29:g28, g31:g30, g33:g32, g35:g34, g37:g36, g39:g38, g41:g40, c1H:c1L, c2H:c2L, c3H:c3L, c4H:c4L, c5H:c5L, c6H:c6L, c7H:c7L, c8H:c8L, fy0H:fy0L, fy1H:fy1L, fy2H:fy2L, piH:piL, a31, coef0H:coef0L, coef1H:coef1L, coef2H:coef2L
.add_var      x, y, z, offset

            SMVAGA36    input_x1:input_x0,       x
			SMVAGA36    input_y1:input_y0,       y
			SMVAGA36    output_z1:output_z0,     z
			  
			SMOVIL      	16,     tmp1
			SMOVIH			0,		tmp1
			SMOVIL			0,		tmp0
			SMVAGA36    	tmp0:tmp1,   offset 
			SMOVIL      	3,      tmp2
			SMVCGC      	tmp2,   SCR 
			
.atan2dp_loop: .loop

            VLDDWM2     *x++[offset],        x1:x0 
            VLDDWM2     *x++[offset],        x3:x2
            VLDDWM2     *x++[offset],        x5:x4

            VLDDWM2     *y++[offset],        y1:y0 
            VLDDWM2     *y++[offset],        y3:y2
            VLDDWM2     *y++[offset],        y5:y4
			
			VMOVIL      0,                   a0L
			VMOVIH      0,                   a0L
			VMOVIL      0,                   a0H
			VMOVIH      0,                   a0H                 ;a0 = 0
            VMOVIL      0,                   a1L
            VMOVIH      0,                   a1L
            VMOVIL      0,                   a1H
            VMOVIH      0x3FF00000,          a1H                 ;a1 = 1 
			
			VMOV        a0L,                 g0
			VMOV        a0H,                 g1
			VMOV        a0L,                 g2
			VMOV        a0H,                 g3
			VMOV        a0L,                 g4
			VMOV        a0H,                 g5                  ;g=0
			
			VMOV        a0L,                 num0L
			VMOV        a0H,                 num0H
			VMOV        a0L,                 num1L
			VMOV        a0H,                 num1H
			VMOV        a0L,                 num2L
			VMOV        a0H,                 num2H               ;num=0
			
			VMOV        a0L,                 flag0L
			VMOV        a0H,                 flag0H
			VMOV        a0L,                 flag1L
			VMOV        a0H,                 flag1H
			VMOV        a0L,                 flag2L
			VMOV        a0H,                 flag2H              ;flag=0
			
			VMOV        a0L,                 xsign0L
			VMOV        a0H,                 xsign0H
			VMOV        a0L,                 xsign1L
			VMOV        a0H,                 xsign1H
			VMOV        a0L,                 xsign2L
			VMOV        a0H,                 xsign2H             ;xsign=0
			
			VMOV        a0L,                 ysign0L
			VMOV        a0H,                 ysign0H
			VMOV        a0L,                 ysign1L
			VMOV        a0H,                 ysign1H
			VMOV        a0L,                 ysign2L
			VMOV        a0H,                 ysign2H             ;ysign=0
			
			VFCMPLD     x1:x0, a0H:a0L,      cond0
			VFCMPLD     x3:x2, a0H:a0L,      cond1
			VFCMPLD     x5:x4, a0H:a0L,      cond2               ;x<0?
			
[cond0]     VMOV        a1L,                 xsign0L
[cond0]     VMOV        a1H,                 xsign0H
[cond1]     VMOV        a1L,                 xsign1L
[cond1]     VMOV        a1H,                 xsign1H
[cond2]     VMOV        a1L,                 xsign2L
[cond2]     VMOV        a1H,                 xsign2H		     ;if(x<0) then xsign=1

            VFCMPLD     y1:y0, a0H:a0L,      cond0
			VFCMPLD     y3:y2, a0H:a0L,      cond1
			VFCMPLD     y5:y4, a0H:a0L,      cond2               ;y<0?     	
			
[cond0]     VMOV        a1L,                 ysign0L
[cond0]     VMOV        a1H,                 ysign0H
[cond1]     VMOV        a1L,                 ysign1L
[cond1]     VMOV        a1H,                 ysign1H
[cond2]     VMOV        a1L,                 ysign2L
[cond2]     VMOV        a1H,                 ysign2H		     ;if(y<0) then ysign=1
			
			VFABSD      x1:x0,               fabsx0H:fabsx0L
			VFABSD      x3:x2,               fabsx1H:fabsx1L
			VFABSD      x5:x4,               fabsx2H:fabsx2L     ;fabs(x) 
			
			VFABSD      y1:y0,               fabsy0H:fabsy0L
			VFABSD      y3:y2,               fabsy1H:fabsy1L
			VFABSD      y5:y4,               fabsy2H:fabsy2L     ;fabs(y)
			
			VFCMPGD     fabsy0H:fabsy0L, fabsx0H:fabsx0L,  cond0
			VFCMPGD     fabsy1H:fabsy1L, fabsx1H:fabsx1L,  cond1
			VFCMPGD     fabsy2H:fabsy2L, fabsx2H:fabsx2L,  cond2 ;fabs(y)>fabs(x)?
			
[cond0]	    VMOV        x0,                  num0L
[cond0]		VMOV        x1,                  num0H
[cond1]		VMOV        x2,                  num1L
[cond1]		VMOV        x3,                  num1H
[cond2]		VMOV        x4,                  num2L
[cond2]		VMOV        x5,                  num2H               ;if(fabs(y)>fabs(x)) then num=x
			
[cond0]		VMOV        a1L,                 flag0L
[cond0]		VMOV        a1H,                 flag0H
[cond1]		VMOV        a1L,                 flag1L
[cond1]		VMOV        a1H,                 flag1H
[cond2]		VMOV        a1L,                 flag2L
[cond2]		VMOV        a1H,                 flag2H              ;if(fabs(y)>fabs(x)) then flag=1
			
[!cond0]	VMOV        y0,                  num0L
[!cond0]    VMOV        y1,                  num0H
[!cond1]	VMOV        y2,                  num1L
[!cond1]	VMOV        y3,                  num1H
[!cond2]	VMOV        y4,                  num2L
[!cond2]	VMOV        y5,                  num2H               ;else num=y
			
[!cond0]    VMOV        x0,                  y0
[!cond0]    VMOV        x1,                  y1
[!cond1]    VMOV        x2,                  y2
[!cond1]    VMOV        x3,                  y3
[!cond2]    VMOV        x4,                  y4
[!cond2]    VMOV        x5,                  y5                  ;else y=x 			
			
			VMOV        y0,                  g0
			VMOV        y1,                  g1
			VMOV        y2,                  g2
			VMOV        y3,                  g3
			VMOV        y4,                  g4
			VMOV        y5,                  g5                  ;g=y
			
			VFRCPD      g1:g0,               g7:g6
			VFRCPD      g3:g2,               g9:g8
			VFRCPD      g5:g4,               g11:g10             ;g=1/g
			
			VFMULD      g1:g0, g7:g6,        g13:g12
			VFMULD      g3:g2, g9:g8,        g15:g14
			VFMULD      g5:g4, g11:g10,      g17:g16             ;g*1/g 
			
			VMOVIL      0,                   a2L
			VMOVIH      0,                   a2L
			VMOVIL      0,                   a2H
			VMOVIH      0x40000000,          a2H                 ;a2=2
			
			VFSUBD      g13:g12, a2H:a2L,    g19:g18
			VFSUBD      g15:g14, a2H:a2L,    g21:g20
			VFSUBD      g17:g16, a2H:a2L,    g23:g22             ;2-1/g*1/g
			
			VFMULD      g7:g6,   g19:g18,    g25:g24
			VFMULD      g9:g8,   g21:g20,    g27:g26
			VFMULD      g11:g10, g23:g22,    g29:g28             ;1/g*(2-1/g*1/g)
			
			VFMULD      g1:g0, g25:g24,      g13:g12
			VFMULD      g3:g2, g27:g26,      g15:g14
			VFMULD      g5:g4, g29:g28,      g17:g16             ;g*1/g 
			
			VFSUBD      g13:g12, a2H:a2L,    g19:g18
			VFSUBD      g15:g14, a2H:a2L,    g21:g20
			VFSUBD      g17:g16, a2H:a2L,    g23:g22             ;2-1/g*1/g
			
			VFMULD      g25:g24, g19:g18,    g1:g0
			VFMULD      g27:g26, g21:g20,    g3:g2
			VFMULD      g29:g28, g23:g22,    g5:g4               ;g=1/g=1/g*(2-1/g*1/g)
			
			VFMULD      g1:g0, num0H:num0L,  g1:g0
			VFMULD      g3:g2, num1H:num1L,  g3:g2
			VFMULD      g5:g4, num2H:num2L,  g5:g4               ;g=g*num
			
			VFMULD      g1:g0, g1:g0,        g7:g6
			VFMULD      g3:g2, g3:g2,        g9:g8
			VFMULD      g5:g4, g5:g4,        g11:g10             ;g2 
			
			VFMULD      g7:g6, g7:g6,        g13:g12
			VFMULD      g9:g8, g9:g8,        g15:g14
			VFMULD      g11:g10, g11:g10,    g17:g16             ;g4
			
			VFMULD      g7:g6, g13:g12,      g19:g18
			VFMULD      g9:g8, g15:g14,      g21:g20
			VFMULD      g11:g10, g17:g16,    g23:g22             ;g6
			
			VFMULD      g13:g12, g13:g12,    g25:g24
			VFMULD      g15:g14, g15:g14,    g27:g26
			VFMULD      g17:g16, g17:g16,    g29:g28             ;g8
			
			VFMULD      g13:g12, g19:g18,    g31:g30
			VFMULD      g15:g14, g21:g20,    g33:g32
			VFMULD      g17:g16, g23:g22,    g35:g34             ;g10
			
			VFMULD      g19:g18, g19:g18,    g37:g36
			VFMULD      g21:g20, g21:g20,    g39:g38
			VFMULD      g23:g22, g23:g22,    g41:g40             ;g12
			
			VMOVIL      0xA544,              c1L
			VMOVIH      0x70280000,          c1L
			VMOVIL      0xDAC4,              c1H
			VMOVIH      0x3F620000,          c1H                 ;c1 = 0.00230158202
			
			VMOVIL      0x21C3,              c2L
			VMOVIH      0xAB020000,          c2L
			VMOVIL      0x8F76,              c2H
			VMOVIH      0xBF8C0000,          c2H                 ;c2 = -0.0139455100
			
			VMOVIL      0xA665,              c3L
			VMOVIH      0x74350000,          c3L
			VMOVIL      0x286B,              c3H
			VMOVIH      0x3FA40000,          c3H                 ;c3 = 0.03937087815832
			
			VMOVIL      0x9A1E,              c4L
			VMOVIH      0xD8110000,          c4L
			VMOVIL      0x85F7,              c4H
			VMOVIH      0xBFB20000,          c4H                 ;c4 = -0.0723566916
			
			VMOVIL      0xC354,              c5L
			VMOVIH      0xAAED0000,          c5L
			VMOVIL      0xEF5E,              c5H
			VMOVIH      0x3FBA0000,          c5H                 ;c5 = 0.10521499322
			
			VMOVIL      0x98AD,              c6L
			VMOVIH      0xA04E0000,          c6L
			VMOVIL      0x24E3,              c6H
			VMOVIH      0xBFC20000,          c6H                 ;c6 = -0.14175076797
			
			VMOVIL      0xDF5A,              c7L
			VMOVIH      0x17AE0000,          c7L
			VMOVIL      0x9618,              c7H
			VMOVIH      0x3FC90000,          c7H                 ;c7 = 0.19989300877
			
			VMOVIL      0x98B1,              c8L
			VMOVIH      0x6AAE0000,          c8L
			VMOVIL      0x5544,              c8H
			VMOVIH      0xBFD50000,          c8H                 ;c8 = -0.3333293001
			
			VFMULD      c1H:c1L, g13:g12,    z1:z0
			VFMULD      c1H:c1L, g15:g14,    z3:z2
			VFMULD      c1H:c1L, g17:g16,    z5:z4               ;z=c1*g4 
			
			VFMULAD     c2H:c2L, g7:g6, z1:z0,    z1:z0
			VFMULAD     c2H:c2L, g9:g8, z3:z2,    z3:z2
			VFMULAD     c2H:c2L, g11:g10, z5:z4,  z5:z4          ;z=z+c2*g2
			
			VFADDD      c3H:c3L, z1:z0,      z1:z0
			VFADDD      c3H:c3L, z3:z2,      z3:z2
			VFADDD      c3H:c3L, z5:z4,      z5:z4               ;z=z+c3
			
			VFMULD      g37:g36, z1:z0,      z1:z0
			VFMULD      g39:g38, z3:z2,      z3:z2
			VFMULD      g41:g40, z5:z4,      z5:z4               ;z=z*g12
			
			VFMULAD     c4H:c4L, g31:g30, z1:z0,  z1:z0
			VFMULAD     c4H:c4L, g33:g32, z3:z2,  z3:z2
			VFMULAD     c4H:c4L, g35:g34, z5:z4,  z5:z4          ;z=z+c4*g10
			
			VFMULAD     c5H:c5L, g25:g24, z1:z0,  z1:z0
			VFMULAD     c5H:c5L, g27:g26, z3:z2,  z3:z2
			VFMULAD     c5H:c5L, g29:g28, z5:z4,  z5:z4          ;z=z+c5*g8
			
			VFMULAD     c6H:c6L, g19:g18, z1:z0,  z1:z0
			VFMULAD     c6H:c6L, g21:g20, z3:z2,  z3:z2
			VFMULAD     c6H:c6L, g23:g22, z5:z4,  z5:z4          ;z=z+c6*g6
			
			VFMULAD     c7H:c7L, g13:g12, z1:z0,  z1:z0
			VFMULAD     c7H:c7L, g15:g14, z3:z2,  z3:z2
			VFMULAD     c7H:c7L, g17:g16, z5:z4,  z5:z4          ;z=z+c7*g4
			
			VFMULAD     c8H:c8L, g7:g6,   z1:z0,  z1:z0
			VFMULAD     c8H:c8L, g9:g8,   z3:z2,  z3:z2
			VFMULAD     c8H:c8L, g11:g10, z5:z4,  z5:z4          ;z=z+c8*g2
			
			VFMULD      g1:g0, z1:z0,        z1:z0
			VFMULD      g3:g2, z3:z2,        z3:z2
			VFMULD      g5:g4, z5:z4,        z5:z4               ;z*g
			
			VFADDD      g1:g0, z1:z0,        z1:z0
			VFADDD      g3:g2, z3:z2,        z3:z2
			VFADDD      g5:g4, z5:z4,        z5:z4               ;z=z*g+g      
			
			VMOVIL      0x2D18,              coef0L
            VMOVIH      0x54440000,          coef0L
            VMOVIL      0x21FB,              coef0H
            VMOVIH      0x3FF90000,          coef0H
			VMOVIL      0x2D18,              coef1L
            VMOVIH      0x54440000,          coef1L
            VMOVIL      0x21FB,              coef1H
            VMOVIH      0x3FF90000,          coef1H
			VMOVIL      0x2D18,              coef2L
            VMOVIH      0x54440000,          coef2L
            VMOVIL      0x21FB,              coef2H
            VMOVIH      0x3FF90000,          coef2H              ;coef
			
			VFCMPED     a0H:a0L, flag0H:flag0L,   cond0
			VFCMPED     a0H:a0L, flag1H:flag1L,   cond1
			VFCMPED     a0H:a0L, flag2H:flag2L,   cond2          ;flag=0?
			
[!cond0]    VMOV        a0L,                 coef0L			
[!cond0]    VMOV        a0H,                 coef0H
[!cond1]    VMOV        a0L,                 coef1L			
[!cond1]    VMOV        a0H,                 coef1H
[!cond2]    VMOV        a0L,                 coef2L			
[!cond2]    VMOV        a0H,                 coef2H			     ;if(flag) then coef=0

            VFMULD      flag0H:flag0L, ysign0H:ysign0L, fy0H:fy0L
			VFMULD      flag1H:flag1L, ysign1H:ysign1L, fy1H:fy1L
			VFMULD      flag2H:flag2L, ysign2H:ysign2L, fy2H:fy2L  ;flag*ysign 
			
			VFCMPED     a0H:a0L, fy0H:fy0L,        cond0
			VFCMPED     a0H:a0L, fy1H:fy1L,        cond1
			VFCMPED     a0H:a0L, fy2H:fy2L,        cond2
			
			VMOVIL      0x2D18,                    piL 
            VMOVIH      0x54440000,                piL
            VMOVIL      0x21FB,                    piH
            VMOVIH      0x40090000,                piH           ;pi
			
[!cond0]    VMOV        piL,                       coef0L			
[!cond0]    VMOV        piH,                       coef0H
[!cond1]    VMOV        piL,                       coef1L			
[!cond1]    VMOV        piH,                       coef1H
[!cond2]    VMOV        piL,                       coef2L			
[!cond2]    VMOV        piH,                       coef2H	     ;if(flag&&ysign) then coef=pi

			VFCMPED     a0H:a0L, xsign0H:xsign0L,  cond0
			VFCMPED     a0H:a0L, xsign1H:xsign1L,  cond1
			VFCMPED     a0H:a0L, xsign2H:xsign2L,  cond2         ;xsign=0?
			 
			VMOVIL      31,                        a31
            VMOVIH      0,                         a31           ;31
			
[!cond0]    VBEX        a31, coef0H,               coef0H
[!cond1]    VBEX        a31, coef1H,               coef1H
[!cond2]    VBEX        a31, coef2H,               coef2H	     ;if(xsign) then coef=-coef

            VFCMPED     a0H:a0L, flag0H:flag0L,   cond0
			VFCMPED     a0H:a0L, flag1H:flag1L,   cond1
			VFCMPED     a0H:a0L, flag2H:flag2L,   cond2          ;flag=0?
			
[cond0]     VFSUBD      z1:z0, coef0H:coef0L,     z1:z0
[cond1]     VFSUBD      z3:z2, coef1H:coef1L,     z3:z2
[cond2]     VFSUBD      z5:z4, coef2H:coef2L,     z5:z4          ;if(!flag) then z=coef-z

[!cond0]    VFADDD      z1:z0, coef0H:coef0L,     z1:z0
[!cond1]    VFADDD      z3:z2, coef1H:coef1L,     z3:z2
[!cond2]    VFADDD      z5:z4, coef2H:coef2L,     z5:z4          ;else z=coef+z	

            VSTDWM16    z1:z0, *z++[offset]
			VSTDWM16    z3:z2, *z++[offset]
			VSTDWM16    z5:z4, *z++[offset]
			SSUBU       48, len,   len
[len]       SBR         .atan2dp_loop

.endloop

.size atan2dp, -.atan2dp
			
			
			
			
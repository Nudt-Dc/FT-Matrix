.global vsip_vindexbool
.input    input_vp1:input_vp2,input_xp1:input_xp2,num
.gen_var  n, retval, mid, tmp_vp, loop_vp, loop_bool, shuff_add1:shuff_add0, num16, loop_16
.add_var vp_add, xp_add, OR_16
; cycle(6)
			SMVAGA36.M1	input_vp1:input_vp2, vp_add
|			SMOVIL	0, n
			SMOVIH	0, n
			SMVAGA36.M1	input_xp1:input_xp2, xp_add
|			SMOVIL	16, shuff_add0
			SADD.M2	0, n, shuff_add1
|			SMOVIH	0, shuff_add0
			SMVAGA36.M1	shuff_add1:shuff_add0, OR_16
			SADD.M2	0, n, retval
.boolloop     .loop
; cycle(9)
			SSUB.M2	n, num, num16
			SLT	16, num16, loop_16
[loop_16]		SBR	.A1
			SNOP		6
            .boolloop2  .loop
; cycle(0)
; cycle(2)
			SMVCCG	SVR0, mid
			SNOP		1
; cycle(8)
			SEQ	0, mid, loop_vp
[loop_vp]		SBR	.L16
			SNOP		6
; cycle(1)
			SADD.M2	1, retval, retval
|			SSTW	n, *xp_add++[1]
            .L16:
; cycle(9)
			SADD.M2	1, n, n
			SLT	n, num, loop_bool
[loop_bool]		SBR	.boolloop2
			SNOP		6
            .endloop
; cycle(7)
			SBR	.A2
			SNOP		6
.A1:
; cycle(11)
			VLDW	*vp_add++[OR_16], tmp_vp
			SNOP		7
			VMVCGC	tmp_vp, SVR
			SNOP		2
; cycle(2)
			SMVCCG	SVR0, mid
			SNOP		1
; cycle(8)
			SEQ	0, mid, loop_vp
[loop_vp]		SBR	.L0
			SNOP		6
; cycle(1)
			SADD.M2	1, retval, retval
|			SSTW	n, *xp_add++[1]
.L0:
; cycle(2)
			SMVCCG	SVR1, mid
			SADD.M2	1, n, n
; cycle(8)
			SEQ	0, mid, loop_vp
[loop_vp]		SBR	.L1
			SNOP		6
; cycle(1)
			SADD.M2	1, retval, retval
|			SSTW	n, *xp_add++[1]
.L1:
; cycle(2)
			SMVCCG	SVR2, mid
			SADD.M2	1, n, n
; cycle(8)
			SEQ	0, mid, loop_vp
[loop_vp]		SBR	.L2
			SNOP		6
; cycle(1)
			SADD.M2	1, retval, retval
|			SSTW	n, *xp_add++[1]
.L2:
; cycle(2)
			SMVCCG	SVR3, mid
			SADD.M2	1, n, n
; cycle(8)
			SEQ	0, mid, loop_vp
[loop_vp]		SBR	.L3
			SNOP		6
; cycle(1)
			SADD.M2	1, retval, retval
|			SSTW	n, *xp_add++[1]
.L3:
; cycle(2)
			SMVCCG	SVR4, mid
			SADD.M2	1, n, n
; cycle(8)
			SEQ	0, mid, loop_vp
[loop_vp]		SBR	.L4
			SNOP		6
; cycle(1)
			SADD.M2	1, retval, retval
|			SSTW	n, *xp_add++[1]
.L4:
; cycle(2)
			SMVCCG	SVR5, mid
			SADD.M2	1, n, n
; cycle(8)
			SEQ	0, mid, loop_vp
[loop_vp]		SBR	.L5
			SNOP		6
; cycle(1)
			SADD.M2	1, retval, retval
|			SSTW	n, *xp_add++[1]
.L5:
; cycle(2)
			SMVCCG	SVR6, mid
			SADD.M2	1, n, n
; cycle(8)
			SEQ	0, mid, loop_vp
[loop_vp]		SBR	.L6
			SNOP		6
; cycle(1)
			SADD.M2	1, retval, retval
|			SSTW	n, *xp_add++[1]
.L6:
; cycle(2)
			SMVCCG	SVR7, mid
			SADD.M2	1, n, n
; cycle(8)
			SEQ	0, mid, loop_vp
[loop_vp]		SBR	.L7
			SNOP		6
; cycle(1)
			SADD.M2	1, retval, retval
|			SSTW	n, *xp_add++[1]
.L7:
; cycle(2)
			SMVCCG	SVR8, mid
			SADD.M2	1, n, n
; cycle(8)
			SEQ	0, mid, loop_vp
[loop_vp]		SBR	.L8
			SNOP		6
; cycle(1)
			SADD.M2	1, retval, retval
|			SSTW	n, *xp_add++[1]
.L8:
; cycle(2)
			SMVCCG	SVR9, mid
			SADD.M2	1, n, n
; cycle(8)
			SEQ	0, mid, loop_vp
[loop_vp]		SBR	.L9
			SNOP		6
; cycle(1)
			SADD.M2	1, retval, retval
|			SSTW	n, *xp_add++[1]
.L9:
; cycle(2)
			SMVCCG	SVR10, mid
			SADD.M2	1, n, n
; cycle(8)
			SEQ	0, mid, loop_vp
[loop_vp]		SBR	.L10
			SNOP		6
; cycle(1)
			SADD.M2	1, retval, retval
|			SSTW	n, *xp_add++[1]
.L10:
; cycle(2)
			SMVCCG	SVR11, mid
			SADD.M2	1, n, n
; cycle(8)
			SEQ	0, mid, loop_vp
[loop_vp]		SBR	.L11
			SNOP		6
; cycle(1)
			SADD.M2	1, retval, retval
|			SSTW	n, *xp_add++[1]
.L11:
; cycle(2)
			SMVCCG	SVR12, mid
			SADD.M2	1, n, n
; cycle(8)
			SEQ	0, mid, loop_vp
[loop_vp]		SBR	.L12
			SNOP		6
; cycle(1)
			SADD.M2	1, retval, retval
|			SSTW	n, *xp_add++[1]
.L12:
; cycle(2)
			SMVCCG	SVR13, mid
			SADD.M2	1, n, n
; cycle(8)
			SEQ	0, mid, loop_vp
[loop_vp]		SBR	.L13
			SNOP		6
; cycle(1)
			SADD.M2	1, retval, retval
|			SSTW	n, *xp_add++[1]
.L13:
; cycle(2)
			SMVCCG	SVR14, mid
			SADD.M2	1, n, n
; cycle(8)
			SEQ	0, mid, loop_vp
[loop_vp]		SBR	.L14
			SNOP		6
; cycle(1)
			SADD.M2	1, retval, retval
|			SSTW	n, *xp_add++[1]
.L14:
; cycle(2)
			SMVCCG	SVR15, mid
			SADD.M2	1, n, n
; cycle(8)
			SEQ	0, mid, loop_vp
[loop_vp]		SBR	.L15
			SNOP		6
; cycle(1)
			SADD.M2	1, retval, retval
|			SSTW	n, *xp_add++[1]
.L15:
; cycle(1)
			SADD.M2	1, n, n
.A2:
; cycle(8)
			SLT	n, num, loop_bool
[loop_bool]		SBR	.boolloop
			SNOP		6
.endloop
.output retval
.size vsip_vindexbool, -.vsip_vindexbool
